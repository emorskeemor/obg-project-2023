{"ast":null,"code":"// copied to docs too\nexport function getParentProxy(proxy) {\n  if (Object(proxy.$parent) === proxy.$parent) {\n    return proxy.$parent;\n  }\n\n  let {\n    parent\n  } = proxy.$;\n\n  while (Object(parent) === parent) {\n    if (Object(parent.proxy) === parent.proxy) {\n      return parent.proxy;\n    }\n\n    parent = parent.parent;\n  }\n}\n\nfunction fillNormalizedVNodes(children, vnode) {\n  if (typeof vnode.type === 'symbol') {\n    if (Array.isArray(vnode.children) === true) {\n      vnode.children.forEach(child => {\n        fillNormalizedVNodes(children, child);\n      });\n    }\n  } else {\n    children.add(vnode);\n  }\n} // vnodes from rendered in advanced slots\n\n\nexport function getNormalizedVNodes(vnodes) {\n  const children = new Set();\n  vnodes.forEach(vnode => {\n    fillNormalizedVNodes(children, vnode);\n  });\n  return Array.from(children);\n}\nexport function vmHasRouter(vm) {\n  return vm.appContext.config.globalProperties.$router !== void 0;\n}","map":{"version":3,"names":["getParentProxy","proxy","Object","$parent","parent","$","fillNormalizedVNodes","children","vnode","type","Array","isArray","forEach","child","add","getNormalizedVNodes","vnodes","Set","from","vmHasRouter","vm","appContext","config","globalProperties","$router"],"sources":["C:/Users/User/Documents/Projects/Option blocks/website/client/node_modules/quasar/src/utils/private/vm.js"],"sourcesContent":["\n// copied to docs too\nexport function getParentProxy (proxy) {\n  if (Object(proxy.$parent) === proxy.$parent) {\n    return proxy.$parent\n  }\n\n  let { parent } = proxy.$\n\n  while (Object(parent) === parent) {\n    if (Object(parent.proxy) === parent.proxy) {\n      return parent.proxy\n    }\n\n    parent = parent.parent\n  }\n}\n\nfunction fillNormalizedVNodes (children, vnode) {\n  if (typeof vnode.type === 'symbol') {\n    if (Array.isArray(vnode.children) === true) {\n      vnode.children.forEach(child => {\n        fillNormalizedVNodes(children, child)\n      })\n    }\n  }\n  else {\n    children.add(vnode)\n  }\n}\n\n// vnodes from rendered in advanced slots\nexport function getNormalizedVNodes (vnodes) {\n  const children = new Set()\n\n  vnodes.forEach(vnode => {\n    fillNormalizedVNodes(children, vnode)\n  })\n\n  return Array.from(children)\n}\n\nexport function vmHasRouter (vm) {\n  return vm.appContext.config.globalProperties.$router !== void 0\n}\n"],"mappings":"AACA;AACA,OAAO,SAASA,cAAT,CAAyBC,KAAzB,EAAgC;EACrC,IAAIC,MAAM,CAACD,KAAK,CAACE,OAAP,CAAN,KAA0BF,KAAK,CAACE,OAApC,EAA6C;IAC3C,OAAOF,KAAK,CAACE,OAAb;EACD;;EAED,IAAI;IAAEC;EAAF,IAAaH,KAAK,CAACI,CAAvB;;EAEA,OAAOH,MAAM,CAACE,MAAD,CAAN,KAAmBA,MAA1B,EAAkC;IAChC,IAAIF,MAAM,CAACE,MAAM,CAACH,KAAR,CAAN,KAAyBG,MAAM,CAACH,KAApC,EAA2C;MACzC,OAAOG,MAAM,CAACH,KAAd;IACD;;IAEDG,MAAM,GAAGA,MAAM,CAACA,MAAhB;EACD;AACF;;AAED,SAASE,oBAAT,CAA+BC,QAA/B,EAAyCC,KAAzC,EAAgD;EAC9C,IAAI,OAAOA,KAAK,CAACC,IAAb,KAAsB,QAA1B,EAAoC;IAClC,IAAIC,KAAK,CAACC,OAAN,CAAcH,KAAK,CAACD,QAApB,MAAkC,IAAtC,EAA4C;MAC1CC,KAAK,CAACD,QAAN,CAAeK,OAAf,CAAuBC,KAAK,IAAI;QAC9BP,oBAAoB,CAACC,QAAD,EAAWM,KAAX,CAApB;MACD,CAFD;IAGD;EACF,CAND,MAOK;IACHN,QAAQ,CAACO,GAAT,CAAaN,KAAb;EACD;AACF,C,CAED;;;AACA,OAAO,SAASO,mBAAT,CAA8BC,MAA9B,EAAsC;EAC3C,MAAMT,QAAQ,GAAG,IAAIU,GAAJ,EAAjB;EAEAD,MAAM,CAACJ,OAAP,CAAeJ,KAAK,IAAI;IACtBF,oBAAoB,CAACC,QAAD,EAAWC,KAAX,CAApB;EACD,CAFD;EAIA,OAAOE,KAAK,CAACQ,IAAN,CAAWX,QAAX,CAAP;AACD;AAED,OAAO,SAASY,WAAT,CAAsBC,EAAtB,EAA0B;EAC/B,OAAOA,EAAE,CAACC,UAAH,CAAcC,MAAd,CAAqBC,gBAArB,CAAsCC,OAAtC,KAAkD,KAAK,CAA9D;AACD"},"metadata":{},"sourceType":"module"}